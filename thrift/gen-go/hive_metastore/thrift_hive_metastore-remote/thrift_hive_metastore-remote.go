// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/akozlenkov/metastore/thrift/gen-go/fb303"
	"github.com/akozlenkov/metastore/thrift/gen-go/hive_metastore"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = fb303.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_catalog(CreateCatalogRequest catalog)")
	fmt.Fprintln(os.Stderr, "  void alter_catalog(AlterCatalogRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetCatalogResponse get_catalog(GetCatalogRequest catName)")
	fmt.Fprintln(os.Stderr, "  GetCatalogsResponse get_catalogs()")
	fmt.Fprintln(os.Stderr, "  void drop_catalog(DropCatalogRequest catName)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints,  defaultConstraints,  checkConstraints)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_default_constraint(AddDefaultConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_check_constraint(AddCheckConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_materialized_views_for_rewriting(string db_name)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "  Materialization get_materialization_invalidation_info(CreationMetadata creation_metadata, string validTxnList)")
	fmt.Fprintln(os.Stderr, "  void update_creation_metadata(string catName, string dbname, string tbl_name, CreationMetadata creation_metadata)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  DefaultConstraintsResponse get_default_constraints(DefaultConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  CheckConstraintsResponse get_check_constraints(CheckConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse refresh_privileges(HiveObjectRef objToRefresh, string authorizer, GrantRevokePrivilegeRequest grantRequest)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void repl_tbl_writeid_state(ReplTblWriteIdStateRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetValidWriteIdsResponse get_valid_write_ids(GetValidWriteIdsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  AllocateTableWriteIdsResponse allocate_table_write_ids(AllocateTableWriteIdsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
	fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreatePoolResponse create_wm_pool(WMCreatePoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterPoolResponse alter_wm_pool(WMAlterPoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropPoolResponse drop_wm_pool(WMDropPoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateOrUpdateMappingResponse create_or_update_wm_mapping(WMCreateOrUpdateMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropMappingResponse drop_wm_mapping(WMDropMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateOrDropTriggerToPoolMappingResponse create_or_drop_wm_trigger_to_pool_mapping(WMCreateOrDropTriggerToPoolMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  void create_ischema(ISchema schema)")
	fmt.Fprintln(os.Stderr, "  void alter_ischema(AlterISchemaRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ISchema get_ischema(ISchemaName name)")
	fmt.Fprintln(os.Stderr, "  void drop_ischema(ISchemaName name)")
	fmt.Fprintln(os.Stderr, "  void add_schema_version(SchemaVersion schemaVersion)")
	fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_version(SchemaVersionDescriptor schemaVersion)")
	fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_latest_version(ISchemaName schemaName)")
	fmt.Fprintln(os.Stderr, "   get_schema_all_versions(ISchemaName schemaName)")
	fmt.Fprintln(os.Stderr, "  void drop_schema_version(SchemaVersionDescriptor schemaVersion)")
	fmt.Fprintln(os.Stderr, "  FindSchemasByColsResp get_schemas_by_cols(FindSchemasByColsRqst rqst)")
	fmt.Fprintln(os.Stderr, "  void map_schema_version_to_serde(MapSchemaVersionToSerdeRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void set_schema_version_state(SetSchemaVersionStateRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_serde(SerDeInfo serde)")
	fmt.Fprintln(os.Stderr, "  SerDeInfo get_serde(GetSerdeRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse get_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
	fmt.Fprintln(os.Stderr, "  bool heartbeat_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
	fmt.Fprintln(os.Stderr, "  void add_runtime_stats(RuntimeStat stat)")
	fmt.Fprintln(os.Stderr, "   get_runtime_stats(GetRuntimeStatsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
	fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "  string getOption(string key)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateCatalog requires 1 args")
			flag.Usage()
		}
		arg620 := flag.Arg(1)
		mbTrans621 := thrift.NewTMemoryBufferLen(len(arg620))
		defer mbTrans621.Close()
		_, err622 := mbTrans621.WriteString(arg620)
		if err622 != nil {
			Usage()
			return
		}
		factory623 := thrift.NewTJSONProtocolFactory()
		jsProt624 := factory623.GetProtocol(mbTrans621)
		argvalue0 := hive_metastore.NewCreateCatalogRequest()
		err625 := argvalue0.Read(jsProt624)
		if err625 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterCatalog requires 1 args")
			flag.Usage()
		}
		arg626 := flag.Arg(1)
		mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
		defer mbTrans627.Close()
		_, err628 := mbTrans627.WriteString(arg626)
		if err628 != nil {
			Usage()
			return
		}
		factory629 := thrift.NewTJSONProtocolFactory()
		jsProt630 := factory629.GetProtocol(mbTrans627)
		argvalue0 := hive_metastore.NewAlterCatalogRequest()
		err631 := argvalue0.Read(jsProt630)
		if err631 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCatalog requires 1 args")
			flag.Usage()
		}
		arg632 := flag.Arg(1)
		mbTrans633 := thrift.NewTMemoryBufferLen(len(arg632))
		defer mbTrans633.Close()
		_, err634 := mbTrans633.WriteString(arg632)
		if err634 != nil {
			Usage()
			return
		}
		factory635 := thrift.NewTJSONProtocolFactory()
		jsProt636 := factory635.GetProtocol(mbTrans633)
		argvalue0 := hive_metastore.NewGetCatalogRequest()
		err637 := argvalue0.Read(jsProt636)
		if err637 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_catalogs":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCatalogs requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCatalogs(context.Background()))
		fmt.Print("\n")
		break
	case "drop_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropCatalog requires 1 args")
			flag.Usage()
		}
		arg638 := flag.Arg(1)
		mbTrans639 := thrift.NewTMemoryBufferLen(len(arg638))
		defer mbTrans639.Close()
		_, err640 := mbTrans639.WriteString(arg638)
		if err640 != nil {
			Usage()
			return
		}
		factory641 := thrift.NewTJSONProtocolFactory()
		jsProt642 := factory641.GetProtocol(mbTrans639)
		argvalue0 := hive_metastore.NewDropCatalogRequest()
		err643 := argvalue0.Read(jsProt642)
		if err643 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg644 := flag.Arg(1)
		mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
		defer mbTrans645.Close()
		_, err646 := mbTrans645.WriteString(arg644)
		if err646 != nil {
			Usage()
			return
		}
		factory647 := thrift.NewTJSONProtocolFactory()
		jsProt648 := factory647.GetProtocol(mbTrans645)
		argvalue0 := hive_metastore.NewDatabase()
		err649 := argvalue0.Read(jsProt648)
		if err649 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg656 := flag.Arg(2)
		mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
		defer mbTrans657.Close()
		_, err658 := mbTrans657.WriteString(arg656)
		if err658 != nil {
			Usage()
			return
		}
		factory659 := thrift.NewTJSONProtocolFactory()
		jsProt660 := factory659.GetProtocol(mbTrans657)
		argvalue1 := hive_metastore.NewDatabase()
		err661 := argvalue1.Read(jsProt660)
		if err661 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg663 := flag.Arg(1)
		mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
		defer mbTrans664.Close()
		_, err665 := mbTrans664.WriteString(arg663)
		if err665 != nil {
			Usage()
			return
		}
		factory666 := thrift.NewTJSONProtocolFactory()
		jsProt667 := factory666.GetProtocol(mbTrans664)
		argvalue0 := hive_metastore.NewType()
		err668 := argvalue0.Read(jsProt667)
		if err668 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg675 := flag.Arg(3)
		mbTrans676 := thrift.NewTMemoryBufferLen(len(arg675))
		defer mbTrans676.Close()
		_, err677 := mbTrans676.WriteString(arg675)
		if err677 != nil {
			Usage()
			return
		}
		factory678 := thrift.NewTJSONProtocolFactory()
		jsProt679 := factory678.GetProtocol(mbTrans676)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err680 := argvalue2.Read(jsProt679)
		if err680 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg685 := flag.Arg(3)
		mbTrans686 := thrift.NewTMemoryBufferLen(len(arg685))
		defer mbTrans686.Close()
		_, err687 := mbTrans686.WriteString(arg685)
		if err687 != nil {
			Usage()
			return
		}
		factory688 := thrift.NewTJSONProtocolFactory()
		jsProt689 := factory688.GetProtocol(mbTrans686)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err690 := argvalue2.Read(jsProt689)
		if err690 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg691 := flag.Arg(1)
		mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
		defer mbTrans692.Close()
		_, err693 := mbTrans692.WriteString(arg691)
		if err693 != nil {
			Usage()
			return
		}
		factory694 := thrift.NewTJSONProtocolFactory()
		jsProt695 := factory694.GetProtocol(mbTrans692)
		argvalue0 := hive_metastore.NewTable()
		err696 := argvalue0.Read(jsProt695)
		if err696 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg697 := flag.Arg(1)
		mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
		defer mbTrans698.Close()
		_, err699 := mbTrans698.WriteString(arg697)
		if err699 != nil {
			Usage()
			return
		}
		factory700 := thrift.NewTJSONProtocolFactory()
		jsProt701 := factory700.GetProtocol(mbTrans698)
		argvalue0 := hive_metastore.NewTable()
		err702 := argvalue0.Read(jsProt701)
		if err702 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg703 := flag.Arg(2)
		mbTrans704 := thrift.NewTMemoryBufferLen(len(arg703))
		defer mbTrans704.Close()
		_, err705 := mbTrans704.WriteString(arg703)
		if err705 != nil {
			Usage()
			return
		}
		factory706 := thrift.NewTJSONProtocolFactory()
		jsProt707 := factory706.GetProtocol(mbTrans704)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err708 := argvalue1.Read(jsProt707)
		if err708 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 7 args")
			flag.Usage()
		}
		arg709 := flag.Arg(1)
		mbTrans710 := thrift.NewTMemoryBufferLen(len(arg709))
		defer mbTrans710.Close()
		_, err711 := mbTrans710.WriteString(arg709)
		if err711 != nil {
			Usage()
			return
		}
		factory712 := thrift.NewTJSONProtocolFactory()
		jsProt713 := factory712.GetProtocol(mbTrans710)
		argvalue0 := hive_metastore.NewTable()
		err714 := argvalue0.Read(jsProt713)
		if err714 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg715 := flag.Arg(2)
		mbTrans716 := thrift.NewTMemoryBufferLen(len(arg715))
		defer mbTrans716.Close()
		_, err717 := mbTrans716.WriteString(arg715)
		if err717 != nil {
			Usage()
			return
		}
		factory718 := thrift.NewTJSONProtocolFactory()
		jsProt719 := factory718.GetProtocol(mbTrans716)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err720 := containerStruct1.ReadField2(jsProt719)
		if err720 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg721 := flag.Arg(3)
		mbTrans722 := thrift.NewTMemoryBufferLen(len(arg721))
		defer mbTrans722.Close()
		_, err723 := mbTrans722.WriteString(arg721)
		if err723 != nil {
			Usage()
			return
		}
		factory724 := thrift.NewTJSONProtocolFactory()
		jsProt725 := factory724.GetProtocol(mbTrans722)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err726 := containerStruct2.ReadField3(jsProt725)
		if err726 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		arg727 := flag.Arg(4)
		mbTrans728 := thrift.NewTMemoryBufferLen(len(arg727))
		defer mbTrans728.Close()
		_, err729 := mbTrans728.WriteString(arg727)
		if err729 != nil {
			Usage()
			return
		}
		factory730 := thrift.NewTJSONProtocolFactory()
		jsProt731 := factory730.GetProtocol(mbTrans728)
		containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err732 := containerStruct3.ReadField4(jsProt731)
		if err732 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UniqueConstraints
		value3 := argvalue3
		arg733 := flag.Arg(5)
		mbTrans734 := thrift.NewTMemoryBufferLen(len(arg733))
		defer mbTrans734.Close()
		_, err735 := mbTrans734.WriteString(arg733)
		if err735 != nil {
			Usage()
			return
		}
		factory736 := thrift.NewTJSONProtocolFactory()
		jsProt737 := factory736.GetProtocol(mbTrans734)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err738 := containerStruct4.ReadField5(jsProt737)
		if err738 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.NotNullConstraints
		value4 := argvalue4
		arg739 := flag.Arg(6)
		mbTrans740 := thrift.NewTMemoryBufferLen(len(arg739))
		defer mbTrans740.Close()
		_, err741 := mbTrans740.WriteString(arg739)
		if err741 != nil {
			Usage()
			return
		}
		factory742 := thrift.NewTJSONProtocolFactory()
		jsProt743 := factory742.GetProtocol(mbTrans740)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err744 := containerStruct5.ReadField6(jsProt743)
		if err744 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.DefaultConstraints
		value5 := argvalue5
		arg745 := flag.Arg(7)
		mbTrans746 := thrift.NewTMemoryBufferLen(len(arg745))
		defer mbTrans746.Close()
		_, err747 := mbTrans746.WriteString(arg745)
		if err747 != nil {
			Usage()
			return
		}
		factory748 := thrift.NewTJSONProtocolFactory()
		jsProt749 := factory748.GetProtocol(mbTrans746)
		containerStruct6 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err750 := containerStruct6.ReadField7(jsProt749)
		if err750 != nil {
			Usage()
			return
		}
		argvalue6 := containerStruct6.CheckConstraints
		value6 := argvalue6
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg751 := flag.Arg(1)
		mbTrans752 := thrift.NewTMemoryBufferLen(len(arg751))
		defer mbTrans752.Close()
		_, err753 := mbTrans752.WriteString(arg751)
		if err753 != nil {
			Usage()
			return
		}
		factory754 := thrift.NewTJSONProtocolFactory()
		jsProt755 := factory754.GetProtocol(mbTrans752)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err756 := argvalue0.Read(jsProt755)
		if err756 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg757 := flag.Arg(1)
		mbTrans758 := thrift.NewTMemoryBufferLen(len(arg757))
		defer mbTrans758.Close()
		_, err759 := mbTrans758.WriteString(arg757)
		if err759 != nil {
			Usage()
			return
		}
		factory760 := thrift.NewTJSONProtocolFactory()
		jsProt761 := factory760.GetProtocol(mbTrans758)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err762 := argvalue0.Read(jsProt761)
		if err762 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg763 := flag.Arg(1)
		mbTrans764 := thrift.NewTMemoryBufferLen(len(arg763))
		defer mbTrans764.Close()
		_, err765 := mbTrans764.WriteString(arg763)
		if err765 != nil {
			Usage()
			return
		}
		factory766 := thrift.NewTJSONProtocolFactory()
		jsProt767 := factory766.GetProtocol(mbTrans764)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err768 := argvalue0.Read(jsProt767)
		if err768 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_unique_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
			flag.Usage()
		}
		arg769 := flag.Arg(1)
		mbTrans770 := thrift.NewTMemoryBufferLen(len(arg769))
		defer mbTrans770.Close()
		_, err771 := mbTrans770.WriteString(arg769)
		if err771 != nil {
			Usage()
			return
		}
		factory772 := thrift.NewTJSONProtocolFactory()
		jsProt773 := factory772.GetProtocol(mbTrans770)
		argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
		err774 := argvalue0.Read(jsProt773)
		if err774 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_not_null_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
			flag.Usage()
		}
		arg775 := flag.Arg(1)
		mbTrans776 := thrift.NewTMemoryBufferLen(len(arg775))
		defer mbTrans776.Close()
		_, err777 := mbTrans776.WriteString(arg775)
		if err777 != nil {
			Usage()
			return
		}
		factory778 := thrift.NewTJSONProtocolFactory()
		jsProt779 := factory778.GetProtocol(mbTrans776)
		argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
		err780 := argvalue0.Read(jsProt779)
		if err780 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_default_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDefaultConstraint requires 1 args")
			flag.Usage()
		}
		arg781 := flag.Arg(1)
		mbTrans782 := thrift.NewTMemoryBufferLen(len(arg781))
		defer mbTrans782.Close()
		_, err783 := mbTrans782.WriteString(arg781)
		if err783 != nil {
			Usage()
			return
		}
		factory784 := thrift.NewTJSONProtocolFactory()
		jsProt785 := factory784.GetProtocol(mbTrans782)
		argvalue0 := hive_metastore.NewAddDefaultConstraintRequest()
		err786 := argvalue0.Read(jsProt785)
		if err786 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDefaultConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_check_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddCheckConstraint requires 1 args")
			flag.Usage()
		}
		arg787 := flag.Arg(1)
		mbTrans788 := thrift.NewTMemoryBufferLen(len(arg787))
		defer mbTrans788.Close()
		_, err789 := mbTrans788.WriteString(arg787)
		if err789 != nil {
			Usage()
			return
		}
		factory790 := thrift.NewTJSONProtocolFactory()
		jsProt791 := factory790.GetProtocol(mbTrans788)
		argvalue0 := hive_metastore.NewAddCheckConstraintRequest()
		err792 := argvalue0.Read(jsProt791)
		if err792 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddCheckConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg799 := flag.Arg(4)
		mbTrans800 := thrift.NewTMemoryBufferLen(len(arg799))
		defer mbTrans800.Close()
		_, err801 := mbTrans800.WriteString(arg799)
		if err801 != nil {
			Usage()
			return
		}
		factory802 := thrift.NewTJSONProtocolFactory()
		jsProt803 := factory802.GetProtocol(mbTrans800)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err804 := argvalue3.Read(jsProt803)
		if err804 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "truncate_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg807 := flag.Arg(3)
		mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
		defer mbTrans808.Close()
		_, err809 := mbTrans808.WriteString(arg807)
		if err809 != nil {
			Usage()
			return
		}
		factory810 := thrift.NewTJSONProtocolFactory()
		jsProt811 := factory810.GetProtocol(mbTrans808)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
		err812 := containerStruct2.ReadField3(jsProt811)
		if err812 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartNames
		value2 := argvalue2
		fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_materialized_views_for_rewriting":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMaterializedViewsForRewriting requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMaterializedViewsForRewriting(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg821 := flag.Arg(3)
		mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
		defer mbTrans822.Close()
		_, err823 := mbTrans822.WriteString(arg821)
		if err823 != nil {
			Usage()
			return
		}
		factory824 := thrift.NewTJSONProtocolFactory()
		jsProt825 := factory824.GetProtocol(mbTrans822)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err826 := containerStruct2.ReadField3(jsProt825)
		if err826 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg831 := flag.Arg(2)
		mbTrans832 := thrift.NewTMemoryBufferLen(len(arg831))
		defer mbTrans832.Close()
		_, err833 := mbTrans832.WriteString(arg831)
		if err833 != nil {
			Usage()
			return
		}
		factory834 := thrift.NewTJSONProtocolFactory()
		jsProt835 := factory834.GetProtocol(mbTrans832)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err836 := containerStruct1.ReadField2(jsProt835)
		if err836 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg837 := flag.Arg(1)
		mbTrans838 := thrift.NewTMemoryBufferLen(len(arg837))
		defer mbTrans838.Close()
		_, err839 := mbTrans838.WriteString(arg837)
		if err839 != nil {
			Usage()
			return
		}
		factory840 := thrift.NewTJSONProtocolFactory()
		jsProt841 := factory840.GetProtocol(mbTrans838)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err842 := argvalue0.Read(jsProt841)
		if err842 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg843 := flag.Arg(1)
		mbTrans844 := thrift.NewTMemoryBufferLen(len(arg843))
		defer mbTrans844.Close()
		_, err845 := mbTrans844.WriteString(arg843)
		if err845 != nil {
			Usage()
			return
		}
		factory846 := thrift.NewTJSONProtocolFactory()
		jsProt847 := factory846.GetProtocol(mbTrans844)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err848 := argvalue0.Read(jsProt847)
		if err848 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_materialization_invalidation_info":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetMaterializationInvalidationInfo requires 2 args")
			flag.Usage()
		}
		arg849 := flag.Arg(1)
		mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
		defer mbTrans850.Close()
		_, err851 := mbTrans850.WriteString(arg849)
		if err851 != nil {
			Usage()
			return
		}
		factory852 := thrift.NewTJSONProtocolFactory()
		jsProt853 := factory852.GetProtocol(mbTrans850)
		argvalue0 := hive_metastore.NewCreationMetadata()
		err854 := argvalue0.Read(jsProt853)
		if err854 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetMaterializationInvalidationInfo(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "update_creation_metadata":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateCreationMetadata requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg859 := flag.Arg(4)
		mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
		defer mbTrans860.Close()
		_, err861 := mbTrans860.WriteString(arg859)
		if err861 != nil {
			Usage()
			return
		}
		factory862 := thrift.NewTJSONProtocolFactory()
		jsProt863 := factory862.GetProtocol(mbTrans860)
		argvalue3 := hive_metastore.NewCreationMetadata()
		err864 := argvalue3.Read(jsProt863)
		if err864 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.UpdateCreationMetadata(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err867 := (strconv.Atoi(flag.Arg(3)))
		if err867 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg870 := flag.Arg(3)
		mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
		defer mbTrans871.Close()
		_, err872 := mbTrans871.WriteString(arg870)
		if err872 != nil {
			Usage()
			return
		}
		factory873 := thrift.NewTJSONProtocolFactory()
		jsProt874 := factory873.GetProtocol(mbTrans871)
		argvalue2 := hive_metastore.NewTable()
		err875 := argvalue2.Read(jsProt874)
		if err875 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg878 := flag.Arg(3)
		mbTrans879 := thrift.NewTMemoryBufferLen(len(arg878))
		defer mbTrans879.Close()
		_, err880 := mbTrans879.WriteString(arg878)
		if err880 != nil {
			Usage()
			return
		}
		factory881 := thrift.NewTJSONProtocolFactory()
		jsProt882 := factory881.GetProtocol(mbTrans879)
		argvalue2 := hive_metastore.NewTable()
		err883 := argvalue2.Read(jsProt882)
		if err883 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg884 := flag.Arg(4)
		mbTrans885 := thrift.NewTMemoryBufferLen(len(arg884))
		defer mbTrans885.Close()
		_, err886 := mbTrans885.WriteString(arg884)
		if err886 != nil {
			Usage()
			return
		}
		factory887 := thrift.NewTJSONProtocolFactory()
		jsProt888 := factory887.GetProtocol(mbTrans885)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err889 := argvalue3.Read(jsProt888)
		if err889 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg892 := flag.Arg(3)
		mbTrans893 := thrift.NewTMemoryBufferLen(len(arg892))
		defer mbTrans893.Close()
		_, err894 := mbTrans893.WriteString(arg892)
		if err894 != nil {
			Usage()
			return
		}
		factory895 := thrift.NewTJSONProtocolFactory()
		jsProt896 := factory895.GetProtocol(mbTrans893)
		argvalue2 := hive_metastore.NewTable()
		err897 := argvalue2.Read(jsProt896)
		if err897 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg899 := flag.Arg(1)
		mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
		defer mbTrans900.Close()
		_, err901 := mbTrans900.WriteString(arg899)
		if err901 != nil {
			Usage()
			return
		}
		factory902 := thrift.NewTJSONProtocolFactory()
		jsProt903 := factory902.GetProtocol(mbTrans900)
		argvalue0 := hive_metastore.NewPartition()
		err904 := argvalue0.Read(jsProt903)
		if err904 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg905 := flag.Arg(1)
		mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
		defer mbTrans906.Close()
		_, err907 := mbTrans906.WriteString(arg905)
		if err907 != nil {
			Usage()
			return
		}
		factory908 := thrift.NewTJSONProtocolFactory()
		jsProt909 := factory908.GetProtocol(mbTrans906)
		argvalue0 := hive_metastore.NewPartition()
		err910 := argvalue0.Read(jsProt909)
		if err910 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg911 := flag.Arg(2)
		mbTrans912 := thrift.NewTMemoryBufferLen(len(arg911))
		defer mbTrans912.Close()
		_, err913 := mbTrans912.WriteString(arg911)
		if err913 != nil {
			Usage()
			return
		}
		factory914 := thrift.NewTJSONProtocolFactory()
		jsProt915 := factory914.GetProtocol(mbTrans912)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err916 := argvalue1.Read(jsProt915)
		if err916 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg917 := flag.Arg(1)
		mbTrans918 := thrift.NewTMemoryBufferLen(len(arg917))
		defer mbTrans918.Close()
		_, err919 := mbTrans918.WriteString(arg917)
		if err919 != nil {
			Usage()
			return
		}
		factory920 := thrift.NewTJSONProtocolFactory()
		jsProt921 := factory920.GetProtocol(mbTrans918)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err922 := containerStruct0.ReadField1(jsProt921)
		if err922 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg923 := flag.Arg(1)
		mbTrans924 := thrift.NewTMemoryBufferLen(len(arg923))
		defer mbTrans924.Close()
		_, err925 := mbTrans924.WriteString(arg923)
		if err925 != nil {
			Usage()
			return
		}
		factory926 := thrift.NewTJSONProtocolFactory()
		jsProt927 := factory926.GetProtocol(mbTrans924)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err928 := containerStruct0.ReadField1(jsProt927)
		if err928 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg931 := flag.Arg(3)
		mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
		defer mbTrans932.Close()
		_, err933 := mbTrans932.WriteString(arg931)
		if err933 != nil {
			Usage()
			return
		}
		factory934 := thrift.NewTJSONProtocolFactory()
		jsProt935 := factory934.GetProtocol(mbTrans932)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err936 := containerStruct2.ReadField3(jsProt935)
		if err936 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg937 := flag.Arg(1)
		mbTrans938 := thrift.NewTMemoryBufferLen(len(arg937))
		defer mbTrans938.Close()
		_, err939 := mbTrans938.WriteString(arg937)
		if err939 != nil {
			Usage()
			return
		}
		factory940 := thrift.NewTJSONProtocolFactory()
		jsProt941 := factory940.GetProtocol(mbTrans938)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err942 := argvalue0.Read(jsProt941)
		if err942 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg945 := flag.Arg(3)
		mbTrans946 := thrift.NewTMemoryBufferLen(len(arg945))
		defer mbTrans946.Close()
		_, err947 := mbTrans946.WriteString(arg945)
		if err947 != nil {
			Usage()
			return
		}
		factory948 := thrift.NewTJSONProtocolFactory()
		jsProt949 := factory948.GetProtocol(mbTrans946)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err950 := containerStruct2.ReadField3(jsProt949)
		if err950 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg951 := flag.Arg(4)
		mbTrans952 := thrift.NewTMemoryBufferLen(len(arg951))
		defer mbTrans952.Close()
		_, err953 := mbTrans952.WriteString(arg951)
		if err953 != nil {
			Usage()
			return
		}
		factory954 := thrift.NewTJSONProtocolFactory()
		jsProt955 := factory954.GetProtocol(mbTrans952)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err956 := argvalue3.Read(jsProt955)
		if err956 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg963 := flag.Arg(4)
		mbTrans964 := thrift.NewTMemoryBufferLen(len(arg963))
		defer mbTrans964.Close()
		_, err965 := mbTrans964.WriteString(arg963)
		if err965 != nil {
			Usage()
			return
		}
		factory966 := thrift.NewTJSONProtocolFactory()
		jsProt967 := factory966.GetProtocol(mbTrans964)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err968 := argvalue3.Read(jsProt967)
		if err968 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg971 := flag.Arg(3)
		mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
		defer mbTrans972.Close()
		_, err973 := mbTrans972.WriteString(arg971)
		if err973 != nil {
			Usage()
			return
		}
		factory974 := thrift.NewTJSONProtocolFactory()
		jsProt975 := factory974.GetProtocol(mbTrans972)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err976 := containerStruct2.ReadField3(jsProt975)
		if err976 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg980 := flag.Arg(3)
		mbTrans981 := thrift.NewTMemoryBufferLen(len(arg980))
		defer mbTrans981.Close()
		_, err982 := mbTrans981.WriteString(arg980)
		if err982 != nil {
			Usage()
			return
		}
		factory983 := thrift.NewTJSONProtocolFactory()
		jsProt984 := factory983.GetProtocol(mbTrans981)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err985 := containerStruct2.ReadField3(jsProt984)
		if err985 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg987 := flag.Arg(5)
		mbTrans988 := thrift.NewTMemoryBufferLen(len(arg987))
		defer mbTrans988.Close()
		_, err989 := mbTrans988.WriteString(arg987)
		if err989 != nil {
			Usage()
			return
		}
		factory990 := thrift.NewTJSONProtocolFactory()
		jsProt991 := factory990.GetProtocol(mbTrans988)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err992 := argvalue4.Read(jsProt991)
		if err992 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1001 := flag.Arg(5)
		mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
		defer mbTrans1002.Close()
		_, err1003 := mbTrans1002.WriteString(arg1001)
		if err1003 != nil {
			Usage()
			return
		}
		factory1004 := thrift.NewTJSONProtocolFactory()
		jsProt1005 := factory1004.GetProtocol(mbTrans1002)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1006 := argvalue4.Read(jsProt1005)
		if err1006 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1007 := flag.Arg(1)
		mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
		defer mbTrans1008.Close()
		_, err1009 := mbTrans1008.WriteString(arg1007)
		if err1009 != nil {
			Usage()
			return
		}
		factory1010 := thrift.NewTJSONProtocolFactory()
		jsProt1011 := factory1010.GetProtocol(mbTrans1008)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err1012 := argvalue0.Read(jsProt1011)
		if err1012 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1015 := flag.Arg(3)
		mbTrans1016 := thrift.NewTMemoryBufferLen(len(arg1015))
		defer mbTrans1016.Close()
		_, err1017 := mbTrans1016.WriteString(arg1015)
		if err1017 != nil {
			Usage()
			return
		}
		factory1018 := thrift.NewTJSONProtocolFactory()
		jsProt1019 := factory1018.GetProtocol(mbTrans1016)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err1020 := containerStruct2.ReadField3(jsProt1019)
		if err1020 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg1021 := flag.Arg(1)
		mbTrans1022 := thrift.NewTMemoryBufferLen(len(arg1021))
		defer mbTrans1022.Close()
		_, err1023 := mbTrans1022.WriteString(arg1021)
		if err1023 != nil {
			Usage()
			return
		}
		factory1024 := thrift.NewTJSONProtocolFactory()
		jsProt1025 := factory1024.GetProtocol(mbTrans1022)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err1026 := containerStruct0.ReadField1(jsProt1025)
		if err1026 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg1031 := flag.Arg(1)
		mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
		defer mbTrans1032.Close()
		_, err1033 := mbTrans1032.WriteString(arg1031)
		if err1033 != nil {
			Usage()
			return
		}
		factory1034 := thrift.NewTJSONProtocolFactory()
		jsProt1035 := factory1034.GetProtocol(mbTrans1032)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err1036 := containerStruct0.ReadField1(jsProt1035)
		if err1036 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1043 := flag.Arg(3)
		mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
		defer mbTrans1044.Close()
		_, err1045 := mbTrans1044.WriteString(arg1043)
		if err1045 != nil {
			Usage()
			return
		}
		factory1046 := thrift.NewTJSONProtocolFactory()
		jsProt1047 := factory1046.GetProtocol(mbTrans1044)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1048 := containerStruct2.ReadField3(jsProt1047)
		if err1048 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1050 := flag.Arg(5)
		mbTrans1051 := thrift.NewTMemoryBufferLen(len(arg1050))
		defer mbTrans1051.Close()
		_, err1052 := mbTrans1051.WriteString(arg1050)
		if err1052 != nil {
			Usage()
			return
		}
		factory1053 := thrift.NewTJSONProtocolFactory()
		jsProt1054 := factory1053.GetProtocol(mbTrans1051)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1055 := containerStruct4.ReadField5(jsProt1054)
		if err1055 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1061 := (strconv.Atoi(flag.Arg(3)))
		if err1061 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1064 := (strconv.Atoi(flag.Arg(3)))
		if err1064 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1066 := flag.Arg(5)
		mbTrans1067 := thrift.NewTMemoryBufferLen(len(arg1066))
		defer mbTrans1067.Close()
		_, err1068 := mbTrans1067.WriteString(arg1066)
		if err1068 != nil {
			Usage()
			return
		}
		factory1069 := thrift.NewTJSONProtocolFactory()
		jsProt1070 := factory1069.GetProtocol(mbTrans1067)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err1071 := containerStruct4.ReadField5(jsProt1070)
		if err1071 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1074 := (strconv.Atoi(flag.Arg(3)))
		if err1074 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1077 := (strconv.Atoi(flag.Arg(3)))
		if err1077 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_values":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
			flag.Usage()
		}
		arg1078 := flag.Arg(1)
		mbTrans1079 := thrift.NewTMemoryBufferLen(len(arg1078))
		defer mbTrans1079.Close()
		_, err1080 := mbTrans1079.WriteString(arg1078)
		if err1080 != nil {
			Usage()
			return
		}
		factory1081 := thrift.NewTJSONProtocolFactory()
		jsProt1082 := factory1081.GetProtocol(mbTrans1079)
		argvalue0 := hive_metastore.NewPartitionValuesRequest()
		err1083 := argvalue0.Read(jsProt1082)
		if err1083 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionValues(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1086 := flag.Arg(3)
		mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
		defer mbTrans1087.Close()
		_, err1088 := mbTrans1087.WriteString(arg1086)
		if err1088 != nil {
			Usage()
			return
		}
		factory1089 := thrift.NewTJSONProtocolFactory()
		jsProt1090 := factory1089.GetProtocol(mbTrans1087)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err1091 := containerStruct2.ReadField3(jsProt1090)
		if err1091 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1092 := (strconv.Atoi(flag.Arg(4)))
		if err1092 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1095 := flag.Arg(3)
		mbTrans1096 := thrift.NewTMemoryBufferLen(len(arg1095))
		defer mbTrans1096.Close()
		_, err1097 := mbTrans1096.WriteString(arg1095)
		if err1097 != nil {
			Usage()
			return
		}
		factory1098 := thrift.NewTJSONProtocolFactory()
		jsProt1099 := factory1098.GetProtocol(mbTrans1096)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1100 := containerStruct2.ReadField3(jsProt1099)
		if err1100 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1101 := (strconv.Atoi(flag.Arg(4)))
		if err1101 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg1103 := flag.Arg(6)
		mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
		defer mbTrans1104.Close()
		_, err1105 := mbTrans1104.WriteString(arg1103)
		if err1105 != nil {
			Usage()
			return
		}
		factory1106 := thrift.NewTJSONProtocolFactory()
		jsProt1107 := factory1106.GetProtocol(mbTrans1104)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1108 := containerStruct5.ReadField6(jsProt1107)
		if err1108 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1111 := flag.Arg(3)
		mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
		defer mbTrans1112.Close()
		_, err1113 := mbTrans1112.WriteString(arg1111)
		if err1113 != nil {
			Usage()
			return
		}
		factory1114 := thrift.NewTJSONProtocolFactory()
		jsProt1115 := factory1114.GetProtocol(mbTrans1112)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err1116 := containerStruct2.ReadField3(jsProt1115)
		if err1116 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1117 := (strconv.Atoi(flag.Arg(4)))
		if err1117 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1121 := (strconv.Atoi(flag.Arg(4)))
		if err1121 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1125 := (strconv.Atoi(flag.Arg(4)))
		if err1125 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg1126 := flag.Arg(1)
		mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
		defer mbTrans1127.Close()
		_, err1128 := mbTrans1127.WriteString(arg1126)
		if err1128 != nil {
			Usage()
			return
		}
		factory1129 := thrift.NewTJSONProtocolFactory()
		jsProt1130 := factory1129.GetProtocol(mbTrans1127)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1131 := argvalue0.Read(jsProt1130)
		if err1131 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1137 := flag.Arg(3)
		mbTrans1138 := thrift.NewTMemoryBufferLen(len(arg1137))
		defer mbTrans1138.Close()
		_, err1139 := mbTrans1138.WriteString(arg1137)
		if err1139 != nil {
			Usage()
			return
		}
		factory1140 := thrift.NewTJSONProtocolFactory()
		jsProt1141 := factory1140.GetProtocol(mbTrans1138)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err1142 := containerStruct2.ReadField3(jsProt1141)
		if err1142 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1145 := flag.Arg(3)
		mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
		defer mbTrans1146.Close()
		_, err1147 := mbTrans1146.WriteString(arg1145)
		if err1147 != nil {
			Usage()
			return
		}
		factory1148 := thrift.NewTJSONProtocolFactory()
		jsProt1149 := factory1148.GetProtocol(mbTrans1146)
		argvalue2 := hive_metastore.NewPartition()
		err1150 := argvalue2.Read(jsProt1149)
		if err1150 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1153 := flag.Arg(3)
		mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
		defer mbTrans1154.Close()
		_, err1155 := mbTrans1154.WriteString(arg1153)
		if err1155 != nil {
			Usage()
			return
		}
		factory1156 := thrift.NewTJSONProtocolFactory()
		jsProt1157 := factory1156.GetProtocol(mbTrans1154)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err1158 := containerStruct2.ReadField3(jsProt1157)
		if err1158 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1161 := flag.Arg(3)
		mbTrans1162 := thrift.NewTMemoryBufferLen(len(arg1161))
		defer mbTrans1162.Close()
		_, err1163 := mbTrans1162.WriteString(arg1161)
		if err1163 != nil {
			Usage()
			return
		}
		factory1164 := thrift.NewTJSONProtocolFactory()
		jsProt1165 := factory1164.GetProtocol(mbTrans1162)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err1166 := containerStruct2.ReadField3(jsProt1165)
		if err1166 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg1167 := flag.Arg(4)
		mbTrans1168 := thrift.NewTMemoryBufferLen(len(arg1167))
		defer mbTrans1168.Close()
		_, err1169 := mbTrans1168.WriteString(arg1167)
		if err1169 != nil {
			Usage()
			return
		}
		factory1170 := thrift.NewTJSONProtocolFactory()
		jsProt1171 := factory1170.GetProtocol(mbTrans1168)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1172 := argvalue3.Read(jsProt1171)
		if err1172 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1175 := flag.Arg(3)
		mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
		defer mbTrans1176.Close()
		_, err1177 := mbTrans1176.WriteString(arg1175)
		if err1177 != nil {
			Usage()
			return
		}
		factory1178 := thrift.NewTJSONProtocolFactory()
		jsProt1179 := factory1178.GetProtocol(mbTrans1176)
		argvalue2 := hive_metastore.NewPartition()
		err1180 := argvalue2.Read(jsProt1179)
		if err1180 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1181 := flag.Arg(4)
		mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
		defer mbTrans1182.Close()
		_, err1183 := mbTrans1182.WriteString(arg1181)
		if err1183 != nil {
			Usage()
			return
		}
		factory1184 := thrift.NewTJSONProtocolFactory()
		jsProt1185 := factory1184.GetProtocol(mbTrans1182)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1186 := argvalue3.Read(jsProt1185)
		if err1186 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1189 := flag.Arg(3)
		mbTrans1190 := thrift.NewTMemoryBufferLen(len(arg1189))
		defer mbTrans1190.Close()
		_, err1191 := mbTrans1190.WriteString(arg1189)
		if err1191 != nil {
			Usage()
			return
		}
		factory1192 := thrift.NewTJSONProtocolFactory()
		jsProt1193 := factory1192.GetProtocol(mbTrans1190)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err1194 := containerStruct2.ReadField3(jsProt1193)
		if err1194 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1195 := flag.Arg(4)
		mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
		defer mbTrans1196.Close()
		_, err1197 := mbTrans1196.WriteString(arg1195)
		if err1197 != nil {
			Usage()
			return
		}
		factory1198 := thrift.NewTJSONProtocolFactory()
		jsProt1199 := factory1198.GetProtocol(mbTrans1196)
		argvalue3 := hive_metastore.NewPartition()
		err1200 := argvalue3.Read(jsProt1199)
		if err1200 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg1201 := flag.Arg(1)
		mbTrans1202 := thrift.NewTMemoryBufferLen(len(arg1201))
		defer mbTrans1202.Close()
		_, err1203 := mbTrans1202.WriteString(arg1201)
		if err1203 != nil {
			Usage()
			return
		}
		factory1204 := thrift.NewTJSONProtocolFactory()
		jsProt1205 := factory1204.GetProtocol(mbTrans1202)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err1206 := containerStruct0.ReadField1(jsProt1205)
		if err1206 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1214 := flag.Arg(3)
		mbTrans1215 := thrift.NewTMemoryBufferLen(len(arg1214))
		defer mbTrans1215.Close()
		_, err1216 := mbTrans1215.WriteString(arg1214)
		if err1216 != nil {
			Usage()
			return
		}
		factory1217 := thrift.NewTJSONProtocolFactory()
		jsProt1218 := factory1217.GetProtocol(mbTrans1215)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err1219 := containerStruct2.ReadField3(jsProt1218)
		if err1219 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1222 := flag.Arg(3)
		mbTrans1223 := thrift.NewTMemoryBufferLen(len(arg1222))
		defer mbTrans1223.Close()
		_, err1224 := mbTrans1223.WriteString(arg1222)
		if err1224 != nil {
			Usage()
			return
		}
		factory1225 := thrift.NewTJSONProtocolFactory()
		jsProt1226 := factory1225.GetProtocol(mbTrans1223)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err1227 := containerStruct2.ReadField3(jsProt1226)
		if err1227 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1228 := flag.Arg(1)
		mbTrans1229 := thrift.NewTMemoryBufferLen(len(arg1228))
		defer mbTrans1229.Close()
		_, err1230 := mbTrans1229.WriteString(arg1228)
		if err1230 != nil {
			Usage()
			return
		}
		factory1231 := thrift.NewTJSONProtocolFactory()
		jsProt1232 := factory1231.GetProtocol(mbTrans1229)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1233 := argvalue0.Read(jsProt1232)
		if err1233 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1234 := flag.Arg(1)
		mbTrans1235 := thrift.NewTMemoryBufferLen(len(arg1234))
		defer mbTrans1235.Close()
		_, err1236 := mbTrans1235.WriteString(arg1234)
		if err1236 != nil {
			Usage()
			return
		}
		factory1237 := thrift.NewTJSONProtocolFactory()
		jsProt1238 := factory1237.GetProtocol(mbTrans1235)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1239 := argvalue0.Read(jsProt1238)
		if err1239 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_unique_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
			flag.Usage()
		}
		arg1240 := flag.Arg(1)
		mbTrans1241 := thrift.NewTMemoryBufferLen(len(arg1240))
		defer mbTrans1241.Close()
		_, err1242 := mbTrans1241.WriteString(arg1240)
		if err1242 != nil {
			Usage()
			return
		}
		factory1243 := thrift.NewTJSONProtocolFactory()
		jsProt1244 := factory1243.GetProtocol(mbTrans1241)
		argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
		err1245 := argvalue0.Read(jsProt1244)
		if err1245 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_not_null_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
			flag.Usage()
		}
		arg1246 := flag.Arg(1)
		mbTrans1247 := thrift.NewTMemoryBufferLen(len(arg1246))
		defer mbTrans1247.Close()
		_, err1248 := mbTrans1247.WriteString(arg1246)
		if err1248 != nil {
			Usage()
			return
		}
		factory1249 := thrift.NewTJSONProtocolFactory()
		jsProt1250 := factory1249.GetProtocol(mbTrans1247)
		argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
		err1251 := argvalue0.Read(jsProt1250)
		if err1251 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_default_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDefaultConstraints requires 1 args")
			flag.Usage()
		}
		arg1252 := flag.Arg(1)
		mbTrans1253 := thrift.NewTMemoryBufferLen(len(arg1252))
		defer mbTrans1253.Close()
		_, err1254 := mbTrans1253.WriteString(arg1252)
		if err1254 != nil {
			Usage()
			return
		}
		factory1255 := thrift.NewTJSONProtocolFactory()
		jsProt1256 := factory1255.GetProtocol(mbTrans1253)
		argvalue0 := hive_metastore.NewDefaultConstraintsRequest()
		err1257 := argvalue0.Read(jsProt1256)
		if err1257 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDefaultConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_check_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCheckConstraints requires 1 args")
			flag.Usage()
		}
		arg1258 := flag.Arg(1)
		mbTrans1259 := thrift.NewTMemoryBufferLen(len(arg1258))
		defer mbTrans1259.Close()
		_, err1260 := mbTrans1259.WriteString(arg1258)
		if err1260 != nil {
			Usage()
			return
		}
		factory1261 := thrift.NewTJSONProtocolFactory()
		jsProt1262 := factory1261.GetProtocol(mbTrans1259)
		argvalue0 := hive_metastore.NewCheckConstraintsRequest()
		err1263 := argvalue0.Read(jsProt1262)
		if err1263 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCheckConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1264 := flag.Arg(1)
		mbTrans1265 := thrift.NewTMemoryBufferLen(len(arg1264))
		defer mbTrans1265.Close()
		_, err1266 := mbTrans1265.WriteString(arg1264)
		if err1266 != nil {
			Usage()
			return
		}
		factory1267 := thrift.NewTJSONProtocolFactory()
		jsProt1268 := factory1267.GetProtocol(mbTrans1265)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1269 := argvalue0.Read(jsProt1268)
		if err1269 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1270 := flag.Arg(1)
		mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
		defer mbTrans1271.Close()
		_, err1272 := mbTrans1271.WriteString(arg1270)
		if err1272 != nil {
			Usage()
			return
		}
		factory1273 := thrift.NewTJSONProtocolFactory()
		jsProt1274 := factory1273.GetProtocol(mbTrans1271)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1275 := argvalue0.Read(jsProt1274)
		if err1275 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1283 := flag.Arg(1)
		mbTrans1284 := thrift.NewTMemoryBufferLen(len(arg1283))
		defer mbTrans1284.Close()
		_, err1285 := mbTrans1284.WriteString(arg1283)
		if err1285 != nil {
			Usage()
			return
		}
		factory1286 := thrift.NewTJSONProtocolFactory()
		jsProt1287 := factory1286.GetProtocol(mbTrans1284)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1288 := argvalue0.Read(jsProt1287)
		if err1288 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1289 := flag.Arg(1)
		mbTrans1290 := thrift.NewTMemoryBufferLen(len(arg1289))
		defer mbTrans1290.Close()
		_, err1291 := mbTrans1290.WriteString(arg1289)
		if err1291 != nil {
			Usage()
			return
		}
		factory1292 := thrift.NewTJSONProtocolFactory()
		jsProt1293 := factory1292.GetProtocol(mbTrans1290)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1294 := argvalue0.Read(jsProt1293)
		if err1294 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1295 := flag.Arg(1)
		mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
		defer mbTrans1296.Close()
		_, err1297 := mbTrans1296.WriteString(arg1295)
		if err1297 != nil {
			Usage()
			return
		}
		factory1298 := thrift.NewTJSONProtocolFactory()
		jsProt1299 := factory1298.GetProtocol(mbTrans1296)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1300 := argvalue0.Read(jsProt1299)
		if err1300 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1301 := flag.Arg(1)
		mbTrans1302 := thrift.NewTMemoryBufferLen(len(arg1301))
		defer mbTrans1302.Close()
		_, err1303 := mbTrans1302.WriteString(arg1301)
		if err1303 != nil {
			Usage()
			return
		}
		factory1304 := thrift.NewTJSONProtocolFactory()
		jsProt1305 := factory1304.GetProtocol(mbTrans1302)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1306 := argvalue0.Read(jsProt1305)
		if err1306 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1314 := flag.Arg(1)
		mbTrans1315 := thrift.NewTMemoryBufferLen(len(arg1314))
		defer mbTrans1315.Close()
		_, err1316 := mbTrans1315.WriteString(arg1314)
		if err1316 != nil {
			Usage()
			return
		}
		factory1317 := thrift.NewTJSONProtocolFactory()
		jsProt1318 := factory1317.GetProtocol(mbTrans1315)
		argvalue0 := hive_metastore.NewFunction()
		err1319 := argvalue0.Read(jsProt1318)
		if err1319 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1324 := flag.Arg(3)
		mbTrans1325 := thrift.NewTMemoryBufferLen(len(arg1324))
		defer mbTrans1325.Close()
		_, err1326 := mbTrans1325.WriteString(arg1324)
		if err1326 != nil {
			Usage()
			return
		}
		factory1327 := thrift.NewTJSONProtocolFactory()
		jsProt1328 := factory1327.GetProtocol(mbTrans1325)
		argvalue2 := hive_metastore.NewFunction()
		err1329 := argvalue2.Read(jsProt1328)
		if err1329 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1334 := flag.Arg(1)
		mbTrans1335 := thrift.NewTMemoryBufferLen(len(arg1334))
		defer mbTrans1335.Close()
		_, err1336 := mbTrans1335.WriteString(arg1334)
		if err1336 != nil {
			Usage()
			return
		}
		factory1337 := thrift.NewTJSONProtocolFactory()
		jsProt1338 := factory1337.GetProtocol(mbTrans1335)
		argvalue0 := hive_metastore.NewRole()
		err1339 := argvalue0.Read(jsProt1338)
		if err1339 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1348 := flag.Arg(1)
		mbTrans1349 := thrift.NewTMemoryBufferLen(len(arg1348))
		defer mbTrans1349.Close()
		_, err1350 := mbTrans1349.WriteString(arg1348)
		if err1350 != nil {
			Usage()
			return
		}
		factory1351 := thrift.NewTJSONProtocolFactory()
		jsProt1352 := factory1351.GetProtocol(mbTrans1349)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1353 := argvalue0.Read(jsProt1352)
		if err1353 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1354 := flag.Arg(1)
		mbTrans1355 := thrift.NewTMemoryBufferLen(len(arg1354))
		defer mbTrans1355.Close()
		_, err1356 := mbTrans1355.WriteString(arg1354)
		if err1356 != nil {
			Usage()
			return
		}
		factory1357 := thrift.NewTJSONProtocolFactory()
		jsProt1358 := factory1357.GetProtocol(mbTrans1355)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1359 := argvalue0.Read(jsProt1358)
		if err1359 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1360 := flag.Arg(1)
		mbTrans1361 := thrift.NewTMemoryBufferLen(len(arg1360))
		defer mbTrans1361.Close()
		_, err1362 := mbTrans1361.WriteString(arg1360)
		if err1362 != nil {
			Usage()
			return
		}
		factory1363 := thrift.NewTJSONProtocolFactory()
		jsProt1364 := factory1363.GetProtocol(mbTrans1361)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1365 := argvalue0.Read(jsProt1364)
		if err1365 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1366 := flag.Arg(1)
		mbTrans1367 := thrift.NewTMemoryBufferLen(len(arg1366))
		defer mbTrans1367.Close()
		_, err1368 := mbTrans1367.WriteString(arg1366)
		if err1368 != nil {
			Usage()
			return
		}
		factory1369 := thrift.NewTJSONProtocolFactory()
		jsProt1370 := factory1369.GetProtocol(mbTrans1367)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1371 := argvalue0.Read(jsProt1370)
		if err1371 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1373 := flag.Arg(3)
		mbTrans1374 := thrift.NewTMemoryBufferLen(len(arg1373))
		defer mbTrans1374.Close()
		_, err1375 := mbTrans1374.WriteString(arg1373)
		if err1375 != nil {
			Usage()
			return
		}
		factory1376 := thrift.NewTJSONProtocolFactory()
		jsProt1377 := factory1376.GetProtocol(mbTrans1374)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1378 := containerStruct2.ReadField3(jsProt1377)
		if err1378 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1380 := flag.Arg(3)
		mbTrans1381 := thrift.NewTMemoryBufferLen(len(arg1380))
		defer mbTrans1381.Close()
		_, err1382 := mbTrans1381.WriteString(arg1380)
		if err1382 != nil {
			Usage()
			return
		}
		factory1383 := thrift.NewTJSONProtocolFactory()
		jsProt1384 := factory1383.GetProtocol(mbTrans1381)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1385 := argvalue2.Read(jsProt1384)
		if err1385 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1386 := flag.Arg(1)
		mbTrans1387 := thrift.NewTMemoryBufferLen(len(arg1386))
		defer mbTrans1387.Close()
		_, err1388 := mbTrans1387.WriteString(arg1386)
		if err1388 != nil {
			Usage()
			return
		}
		factory1389 := thrift.NewTJSONProtocolFactory()
		jsProt1390 := factory1389.GetProtocol(mbTrans1387)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1391 := argvalue0.Read(jsProt1390)
		if err1391 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1392 := flag.Arg(1)
		mbTrans1393 := thrift.NewTMemoryBufferLen(len(arg1392))
		defer mbTrans1393.Close()
		_, err1394 := mbTrans1393.WriteString(arg1392)
		if err1394 != nil {
			Usage()
			return
		}
		factory1395 := thrift.NewTJSONProtocolFactory()
		jsProt1396 := factory1395.GetProtocol(mbTrans1393)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1397 := argvalue0.Read(jsProt1396)
		if err1397 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1398 := flag.Arg(1)
		mbTrans1399 := thrift.NewTMemoryBufferLen(len(arg1398))
		defer mbTrans1399.Close()
		_, err1400 := mbTrans1399.WriteString(arg1398)
		if err1400 != nil {
			Usage()
			return
		}
		factory1401 := thrift.NewTJSONProtocolFactory()
		jsProt1402 := factory1401.GetProtocol(mbTrans1399)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1403 := argvalue0.Read(jsProt1402)
		if err1403 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "refresh_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RefreshPrivileges requires 3 args")
			flag.Usage()
		}
		arg1404 := flag.Arg(1)
		mbTrans1405 := thrift.NewTMemoryBufferLen(len(arg1404))
		defer mbTrans1405.Close()
		_, err1406 := mbTrans1405.WriteString(arg1404)
		if err1406 != nil {
			Usage()
			return
		}
		factory1407 := thrift.NewTJSONProtocolFactory()
		jsProt1408 := factory1407.GetProtocol(mbTrans1405)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1409 := argvalue0.Read(jsProt1408)
		if err1409 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1411 := flag.Arg(3)
		mbTrans1412 := thrift.NewTMemoryBufferLen(len(arg1411))
		defer mbTrans1412.Close()
		_, err1413 := mbTrans1412.WriteString(arg1411)
		if err1413 != nil {
			Usage()
			return
		}
		factory1414 := thrift.NewTJSONProtocolFactory()
		jsProt1415 := factory1414.GetProtocol(mbTrans1412)
		argvalue2 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1416 := argvalue2.Read(jsProt1415)
		if err1416 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.RefreshPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1418 := flag.Arg(2)
		mbTrans1419 := thrift.NewTMemoryBufferLen(len(arg1418))
		defer mbTrans1419.Close()
		_, err1420 := mbTrans1419.WriteString(arg1418)
		if err1420 != nil {
			Usage()
			return
		}
		factory1421 := thrift.NewTJSONProtocolFactory()
		jsProt1422 := factory1421.GetProtocol(mbTrans1419)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1423 := containerStruct1.ReadField2(jsProt1422)
		if err1423 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1433 := (strconv.Atoi(flag.Arg(1)))
		if err1433 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1435 := (strconv.Atoi(flag.Arg(1)))
		if err1435 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1436 := flag.Arg(1)
		mbTrans1437 := thrift.NewTMemoryBufferLen(len(arg1436))
		defer mbTrans1437.Close()
		_, err1438 := mbTrans1437.WriteString(arg1436)
		if err1438 != nil {
			Usage()
			return
		}
		factory1439 := thrift.NewTJSONProtocolFactory()
		jsProt1440 := factory1439.GetProtocol(mbTrans1437)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1441 := argvalue0.Read(jsProt1440)
		if err1441 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1442 := flag.Arg(1)
		mbTrans1443 := thrift.NewTMemoryBufferLen(len(arg1442))
		defer mbTrans1443.Close()
		_, err1444 := mbTrans1443.WriteString(arg1442)
		if err1444 != nil {
			Usage()
			return
		}
		factory1445 := thrift.NewTJSONProtocolFactory()
		jsProt1446 := factory1445.GetProtocol(mbTrans1443)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1447 := argvalue0.Read(jsProt1446)
		if err1447 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1448 := flag.Arg(1)
		mbTrans1449 := thrift.NewTMemoryBufferLen(len(arg1448))
		defer mbTrans1449.Close()
		_, err1450 := mbTrans1449.WriteString(arg1448)
		if err1450 != nil {
			Usage()
			return
		}
		factory1451 := thrift.NewTJSONProtocolFactory()
		jsProt1452 := factory1451.GetProtocol(mbTrans1449)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1453 := argvalue0.Read(jsProt1452)
		if err1453 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1454 := flag.Arg(1)
		mbTrans1455 := thrift.NewTMemoryBufferLen(len(arg1454))
		defer mbTrans1455.Close()
		_, err1456 := mbTrans1455.WriteString(arg1454)
		if err1456 != nil {
			Usage()
			return
		}
		factory1457 := thrift.NewTJSONProtocolFactory()
		jsProt1458 := factory1457.GetProtocol(mbTrans1455)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1459 := argvalue0.Read(jsProt1458)
		if err1459 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "repl_tbl_writeid_state":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReplTblWriteidState requires 1 args")
			flag.Usage()
		}
		arg1460 := flag.Arg(1)
		mbTrans1461 := thrift.NewTMemoryBufferLen(len(arg1460))
		defer mbTrans1461.Close()
		_, err1462 := mbTrans1461.WriteString(arg1460)
		if err1462 != nil {
			Usage()
			return
		}
		factory1463 := thrift.NewTJSONProtocolFactory()
		jsProt1464 := factory1463.GetProtocol(mbTrans1461)
		argvalue0 := hive_metastore.NewReplTblWriteIdStateRequest()
		err1465 := argvalue0.Read(jsProt1464)
		if err1465 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReplTblWriteidState(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_valid_write_ids":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetValidWriteIds requires 1 args")
			flag.Usage()
		}
		arg1466 := flag.Arg(1)
		mbTrans1467 := thrift.NewTMemoryBufferLen(len(arg1466))
		defer mbTrans1467.Close()
		_, err1468 := mbTrans1467.WriteString(arg1466)
		if err1468 != nil {
			Usage()
			return
		}
		factory1469 := thrift.NewTJSONProtocolFactory()
		jsProt1470 := factory1469.GetProtocol(mbTrans1467)
		argvalue0 := hive_metastore.NewGetValidWriteIdsRequest()
		err1471 := argvalue0.Read(jsProt1470)
		if err1471 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetValidWriteIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "allocate_table_write_ids":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AllocateTableWriteIds requires 1 args")
			flag.Usage()
		}
		arg1472 := flag.Arg(1)
		mbTrans1473 := thrift.NewTMemoryBufferLen(len(arg1472))
		defer mbTrans1473.Close()
		_, err1474 := mbTrans1473.WriteString(arg1472)
		if err1474 != nil {
			Usage()
			return
		}
		factory1475 := thrift.NewTJSONProtocolFactory()
		jsProt1476 := factory1475.GetProtocol(mbTrans1473)
		argvalue0 := hive_metastore.NewAllocateTableWriteIdsRequest()
		err1477 := argvalue0.Read(jsProt1476)
		if err1477 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AllocateTableWriteIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1478 := flag.Arg(1)
		mbTrans1479 := thrift.NewTMemoryBufferLen(len(arg1478))
		defer mbTrans1479.Close()
		_, err1480 := mbTrans1479.WriteString(arg1478)
		if err1480 != nil {
			Usage()
			return
		}
		factory1481 := thrift.NewTJSONProtocolFactory()
		jsProt1482 := factory1481.GetProtocol(mbTrans1479)
		argvalue0 := hive_metastore.NewLockRequest()
		err1483 := argvalue0.Read(jsProt1482)
		if err1483 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1484 := flag.Arg(1)
		mbTrans1485 := thrift.NewTMemoryBufferLen(len(arg1484))
		defer mbTrans1485.Close()
		_, err1486 := mbTrans1485.WriteString(arg1484)
		if err1486 != nil {
			Usage()
			return
		}
		factory1487 := thrift.NewTJSONProtocolFactory()
		jsProt1488 := factory1487.GetProtocol(mbTrans1485)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1489 := argvalue0.Read(jsProt1488)
		if err1489 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1490 := flag.Arg(1)
		mbTrans1491 := thrift.NewTMemoryBufferLen(len(arg1490))
		defer mbTrans1491.Close()
		_, err1492 := mbTrans1491.WriteString(arg1490)
		if err1492 != nil {
			Usage()
			return
		}
		factory1493 := thrift.NewTJSONProtocolFactory()
		jsProt1494 := factory1493.GetProtocol(mbTrans1491)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1495 := argvalue0.Read(jsProt1494)
		if err1495 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1496 := flag.Arg(1)
		mbTrans1497 := thrift.NewTMemoryBufferLen(len(arg1496))
		defer mbTrans1497.Close()
		_, err1498 := mbTrans1497.WriteString(arg1496)
		if err1498 != nil {
			Usage()
			return
		}
		factory1499 := thrift.NewTJSONProtocolFactory()
		jsProt1500 := factory1499.GetProtocol(mbTrans1497)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1501 := argvalue0.Read(jsProt1500)
		if err1501 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1502 := flag.Arg(1)
		mbTrans1503 := thrift.NewTMemoryBufferLen(len(arg1502))
		defer mbTrans1503.Close()
		_, err1504 := mbTrans1503.WriteString(arg1502)
		if err1504 != nil {
			Usage()
			return
		}
		factory1505 := thrift.NewTJSONProtocolFactory()
		jsProt1506 := factory1505.GetProtocol(mbTrans1503)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err1507 := argvalue0.Read(jsProt1506)
		if err1507 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg1508 := flag.Arg(1)
		mbTrans1509 := thrift.NewTMemoryBufferLen(len(arg1508))
		defer mbTrans1509.Close()
		_, err1510 := mbTrans1509.WriteString(arg1508)
		if err1510 != nil {
			Usage()
			return
		}
		factory1511 := thrift.NewTJSONProtocolFactory()
		jsProt1512 := factory1511.GetProtocol(mbTrans1509)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err1513 := argvalue0.Read(jsProt1512)
		if err1513 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg1514 := flag.Arg(1)
		mbTrans1515 := thrift.NewTMemoryBufferLen(len(arg1514))
		defer mbTrans1515.Close()
		_, err1516 := mbTrans1515.WriteString(arg1514)
		if err1516 != nil {
			Usage()
			return
		}
		factory1517 := thrift.NewTJSONProtocolFactory()
		jsProt1518 := factory1517.GetProtocol(mbTrans1515)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1519 := argvalue0.Read(jsProt1518)
		if err1519 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg1520 := flag.Arg(1)
		mbTrans1521 := thrift.NewTMemoryBufferLen(len(arg1520))
		defer mbTrans1521.Close()
		_, err1522 := mbTrans1521.WriteString(arg1520)
		if err1522 != nil {
			Usage()
			return
		}
		factory1523 := thrift.NewTJSONProtocolFactory()
		jsProt1524 := factory1523.GetProtocol(mbTrans1521)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1525 := argvalue0.Read(jsProt1524)
		if err1525 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg1526 := flag.Arg(1)
		mbTrans1527 := thrift.NewTMemoryBufferLen(len(arg1526))
		defer mbTrans1527.Close()
		_, err1528 := mbTrans1527.WriteString(arg1526)
		if err1528 != nil {
			Usage()
			return
		}
		factory1529 := thrift.NewTJSONProtocolFactory()
		jsProt1530 := factory1529.GetProtocol(mbTrans1527)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err1531 := argvalue0.Read(jsProt1530)
		if err1531 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg1532 := flag.Arg(1)
		mbTrans1533 := thrift.NewTMemoryBufferLen(len(arg1532))
		defer mbTrans1533.Close()
		_, err1534 := mbTrans1533.WriteString(arg1532)
		if err1534 != nil {
			Usage()
			return
		}
		factory1535 := thrift.NewTJSONProtocolFactory()
		jsProt1536 := factory1535.GetProtocol(mbTrans1533)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err1537 := argvalue0.Read(jsProt1536)
		if err1537 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg1538 := flag.Arg(1)
		mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
		defer mbTrans1539.Close()
		_, err1540 := mbTrans1539.WriteString(arg1538)
		if err1540 != nil {
			Usage()
			return
		}
		factory1541 := thrift.NewTJSONProtocolFactory()
		jsProt1542 := factory1541.GetProtocol(mbTrans1539)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err1543 := argvalue0.Read(jsProt1542)
		if err1543 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "get_notification_events_count":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
			flag.Usage()
		}
		arg1544 := flag.Arg(1)
		mbTrans1545 := thrift.NewTMemoryBufferLen(len(arg1544))
		defer mbTrans1545.Close()
		_, err1546 := mbTrans1545.WriteString(arg1544)
		if err1546 != nil {
			Usage()
			return
		}
		factory1547 := thrift.NewTJSONProtocolFactory()
		jsProt1548 := factory1547.GetProtocol(mbTrans1545)
		argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
		err1549 := argvalue0.Read(jsProt1548)
		if err1549 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg1550 := flag.Arg(1)
		mbTrans1551 := thrift.NewTMemoryBufferLen(len(arg1550))
		defer mbTrans1551.Close()
		_, err1552 := mbTrans1551.WriteString(arg1550)
		if err1552 != nil {
			Usage()
			return
		}
		factory1553 := thrift.NewTJSONProtocolFactory()
		jsProt1554 := factory1553.GetProtocol(mbTrans1551)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err1555 := argvalue0.Read(jsProt1554)
		if err1555 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "cm_recycle":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
			flag.Usage()
		}
		arg1556 := flag.Arg(1)
		mbTrans1557 := thrift.NewTMemoryBufferLen(len(arg1556))
		defer mbTrans1557.Close()
		_, err1558 := mbTrans1557.WriteString(arg1556)
		if err1558 != nil {
			Usage()
			return
		}
		factory1559 := thrift.NewTJSONProtocolFactory()
		jsProt1560 := factory1559.GetProtocol(mbTrans1557)
		argvalue0 := hive_metastore.NewCmRecycleRequest()
		err1561 := argvalue0.Read(jsProt1560)
		if err1561 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CmRecycle(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg1562 := flag.Arg(1)
		mbTrans1563 := thrift.NewTMemoryBufferLen(len(arg1562))
		defer mbTrans1563.Close()
		_, err1564 := mbTrans1563.WriteString(arg1562)
		if err1564 != nil {
			Usage()
			return
		}
		factory1565 := thrift.NewTJSONProtocolFactory()
		jsProt1566 := factory1565.GetProtocol(mbTrans1563)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err1567 := argvalue0.Read(jsProt1566)
		if err1567 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1568 := flag.Arg(1)
		mbTrans1569 := thrift.NewTMemoryBufferLen(len(arg1568))
		defer mbTrans1569.Close()
		_, err1570 := mbTrans1569.WriteString(arg1568)
		if err1570 != nil {
			Usage()
			return
		}
		factory1571 := thrift.NewTJSONProtocolFactory()
		jsProt1572 := factory1571.GetProtocol(mbTrans1569)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err1573 := argvalue0.Read(jsProt1572)
		if err1573 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1574 := flag.Arg(1)
		mbTrans1575 := thrift.NewTMemoryBufferLen(len(arg1574))
		defer mbTrans1575.Close()
		_, err1576 := mbTrans1575.WriteString(arg1574)
		if err1576 != nil {
			Usage()
			return
		}
		factory1577 := thrift.NewTJSONProtocolFactory()
		jsProt1578 := factory1577.GetProtocol(mbTrans1575)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err1579 := argvalue0.Read(jsProt1578)
		if err1579 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1580 := flag.Arg(1)
		mbTrans1581 := thrift.NewTMemoryBufferLen(len(arg1580))
		defer mbTrans1581.Close()
		_, err1582 := mbTrans1581.WriteString(arg1580)
		if err1582 != nil {
			Usage()
			return
		}
		factory1583 := thrift.NewTJSONProtocolFactory()
		jsProt1584 := factory1583.GetProtocol(mbTrans1581)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err1585 := argvalue0.Read(jsProt1584)
		if err1585 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1586 := flag.Arg(1)
		mbTrans1587 := thrift.NewTMemoryBufferLen(len(arg1586))
		defer mbTrans1587.Close()
		_, err1588 := mbTrans1587.WriteString(arg1586)
		if err1588 != nil {
			Usage()
			return
		}
		factory1589 := thrift.NewTJSONProtocolFactory()
		jsProt1590 := factory1589.GetProtocol(mbTrans1587)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err1591 := argvalue0.Read(jsProt1590)
		if err1591 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_metastore_db_uuid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMetastoreDbUUID(context.Background()))
		fmt.Print("\n")
		break
	case "create_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1592 := flag.Arg(1)
		mbTrans1593 := thrift.NewTMemoryBufferLen(len(arg1592))
		defer mbTrans1593.Close()
		_, err1594 := mbTrans1593.WriteString(arg1592)
		if err1594 != nil {
			Usage()
			return
		}
		factory1595 := thrift.NewTJSONProtocolFactory()
		jsProt1596 := factory1595.GetProtocol(mbTrans1593)
		argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
		err1597 := argvalue0.Read(jsProt1596)
		if err1597 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1598 := flag.Arg(1)
		mbTrans1599 := thrift.NewTMemoryBufferLen(len(arg1598))
		defer mbTrans1599.Close()
		_, err1600 := mbTrans1599.WriteString(arg1598)
		if err1600 != nil {
			Usage()
			return
		}
		factory1601 := thrift.NewTJSONProtocolFactory()
		jsProt1602 := factory1601.GetProtocol(mbTrans1599)
		argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
		err1603 := argvalue0.Read(jsProt1602)
		if err1603 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_active_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1604 := flag.Arg(1)
		mbTrans1605 := thrift.NewTMemoryBufferLen(len(arg1604))
		defer mbTrans1605.Close()
		_, err1606 := mbTrans1605.WriteString(arg1604)
		if err1606 != nil {
			Usage()
			return
		}
		factory1607 := thrift.NewTJSONProtocolFactory()
		jsProt1608 := factory1607.GetProtocol(mbTrans1605)
		argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
		err1609 := argvalue0.Read(jsProt1608)
		if err1609 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_resource_plans":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
			flag.Usage()
		}
		arg1610 := flag.Arg(1)
		mbTrans1611 := thrift.NewTMemoryBufferLen(len(arg1610))
		defer mbTrans1611.Close()
		_, err1612 := mbTrans1611.WriteString(arg1610)
		if err1612 != nil {
			Usage()
			return
		}
		factory1613 := thrift.NewTJSONProtocolFactory()
		jsProt1614 := factory1613.GetProtocol(mbTrans1611)
		argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
		err1615 := argvalue0.Read(jsProt1614)
		if err1615 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1616 := flag.Arg(1)
		mbTrans1617 := thrift.NewTMemoryBufferLen(len(arg1616))
		defer mbTrans1617.Close()
		_, err1618 := mbTrans1617.WriteString(arg1616)
		if err1618 != nil {
			Usage()
			return
		}
		factory1619 := thrift.NewTJSONProtocolFactory()
		jsProt1620 := factory1619.GetProtocol(mbTrans1617)
		argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
		err1621 := argvalue0.Read(jsProt1620)
		if err1621 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "validate_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1622 := flag.Arg(1)
		mbTrans1623 := thrift.NewTMemoryBufferLen(len(arg1622))
		defer mbTrans1623.Close()
		_, err1624 := mbTrans1623.WriteString(arg1622)
		if err1624 != nil {
			Usage()
			return
		}
		factory1625 := thrift.NewTJSONProtocolFactory()
		jsProt1626 := factory1625.GetProtocol(mbTrans1623)
		argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
		err1627 := argvalue0.Read(jsProt1626)
		if err1627 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1628 := flag.Arg(1)
		mbTrans1629 := thrift.NewTMemoryBufferLen(len(arg1628))
		defer mbTrans1629.Close()
		_, err1630 := mbTrans1629.WriteString(arg1628)
		if err1630 != nil {
			Usage()
			return
		}
		factory1631 := thrift.NewTJSONProtocolFactory()
		jsProt1632 := factory1631.GetProtocol(mbTrans1629)
		argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
		err1633 := argvalue0.Read(jsProt1632)
		if err1633 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1634 := flag.Arg(1)
		mbTrans1635 := thrift.NewTMemoryBufferLen(len(arg1634))
		defer mbTrans1635.Close()
		_, err1636 := mbTrans1635.WriteString(arg1634)
		if err1636 != nil {
			Usage()
			return
		}
		factory1637 := thrift.NewTJSONProtocolFactory()
		jsProt1638 := factory1637.GetProtocol(mbTrans1635)
		argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
		err1639 := argvalue0.Read(jsProt1638)
		if err1639 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1640 := flag.Arg(1)
		mbTrans1641 := thrift.NewTMemoryBufferLen(len(arg1640))
		defer mbTrans1641.Close()
		_, err1642 := mbTrans1641.WriteString(arg1640)
		if err1642 != nil {
			Usage()
			return
		}
		factory1643 := thrift.NewTJSONProtocolFactory()
		jsProt1644 := factory1643.GetProtocol(mbTrans1641)
		argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
		err1645 := argvalue0.Read(jsProt1644)
		if err1645 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1646 := flag.Arg(1)
		mbTrans1647 := thrift.NewTMemoryBufferLen(len(arg1646))
		defer mbTrans1647.Close()
		_, err1648 := mbTrans1647.WriteString(arg1646)
		if err1648 != nil {
			Usage()
			return
		}
		factory1649 := thrift.NewTJSONProtocolFactory()
		jsProt1650 := factory1649.GetProtocol(mbTrans1647)
		argvalue0 := hive_metastore.NewWMDropTriggerRequest()
		err1651 := argvalue0.Read(jsProt1650)
		if err1651 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_triggers_for_resourceplan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
			flag.Usage()
		}
		arg1652 := flag.Arg(1)
		mbTrans1653 := thrift.NewTMemoryBufferLen(len(arg1652))
		defer mbTrans1653.Close()
		_, err1654 := mbTrans1653.WriteString(arg1652)
		if err1654 != nil {
			Usage()
			return
		}
		factory1655 := thrift.NewTJSONProtocolFactory()
		jsProt1656 := factory1655.GetProtocol(mbTrans1653)
		argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
		err1657 := argvalue0.Read(jsProt1656)
		if err1657 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmPool requires 1 args")
			flag.Usage()
		}
		arg1658 := flag.Arg(1)
		mbTrans1659 := thrift.NewTMemoryBufferLen(len(arg1658))
		defer mbTrans1659.Close()
		_, err1660 := mbTrans1659.WriteString(arg1658)
		if err1660 != nil {
			Usage()
			return
		}
		factory1661 := thrift.NewTJSONProtocolFactory()
		jsProt1662 := factory1661.GetProtocol(mbTrans1659)
		argvalue0 := hive_metastore.NewWMCreatePoolRequest()
		err1663 := argvalue0.Read(jsProt1662)
		if err1663 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmPool requires 1 args")
			flag.Usage()
		}
		arg1664 := flag.Arg(1)
		mbTrans1665 := thrift.NewTMemoryBufferLen(len(arg1664))
		defer mbTrans1665.Close()
		_, err1666 := mbTrans1665.WriteString(arg1664)
		if err1666 != nil {
			Usage()
			return
		}
		factory1667 := thrift.NewTJSONProtocolFactory()
		jsProt1668 := factory1667.GetProtocol(mbTrans1665)
		argvalue0 := hive_metastore.NewWMAlterPoolRequest()
		err1669 := argvalue0.Read(jsProt1668)
		if err1669 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmPool requires 1 args")
			flag.Usage()
		}
		arg1670 := flag.Arg(1)
		mbTrans1671 := thrift.NewTMemoryBufferLen(len(arg1670))
		defer mbTrans1671.Close()
		_, err1672 := mbTrans1671.WriteString(arg1670)
		if err1672 != nil {
			Usage()
			return
		}
		factory1673 := thrift.NewTJSONProtocolFactory()
		jsProt1674 := factory1673.GetProtocol(mbTrans1671)
		argvalue0 := hive_metastore.NewWMDropPoolRequest()
		err1675 := argvalue0.Read(jsProt1674)
		if err1675 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_or_update_wm_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateOrUpdateWmMapping requires 1 args")
			flag.Usage()
		}
		arg1676 := flag.Arg(1)
		mbTrans1677 := thrift.NewTMemoryBufferLen(len(arg1676))
		defer mbTrans1677.Close()
		_, err1678 := mbTrans1677.WriteString(arg1676)
		if err1678 != nil {
			Usage()
			return
		}
		factory1679 := thrift.NewTJSONProtocolFactory()
		jsProt1680 := factory1679.GetProtocol(mbTrans1677)
		argvalue0 := hive_metastore.NewWMCreateOrUpdateMappingRequest()
		err1681 := argvalue0.Read(jsProt1680)
		if err1681 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateOrUpdateWmMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmMapping requires 1 args")
			flag.Usage()
		}
		arg1682 := flag.Arg(1)
		mbTrans1683 := thrift.NewTMemoryBufferLen(len(arg1682))
		defer mbTrans1683.Close()
		_, err1684 := mbTrans1683.WriteString(arg1682)
		if err1684 != nil {
			Usage()
			return
		}
		factory1685 := thrift.NewTJSONProtocolFactory()
		jsProt1686 := factory1685.GetProtocol(mbTrans1683)
		argvalue0 := hive_metastore.NewWMDropMappingRequest()
		err1687 := argvalue0.Read(jsProt1686)
		if err1687 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_or_drop_wm_trigger_to_pool_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateOrDropWmTriggerToPoolMapping requires 1 args")
			flag.Usage()
		}
		arg1688 := flag.Arg(1)
		mbTrans1689 := thrift.NewTMemoryBufferLen(len(arg1688))
		defer mbTrans1689.Close()
		_, err1690 := mbTrans1689.WriteString(arg1688)
		if err1690 != nil {
			Usage()
			return
		}
		factory1691 := thrift.NewTJSONProtocolFactory()
		jsProt1692 := factory1691.GetProtocol(mbTrans1689)
		argvalue0 := hive_metastore.NewWMCreateOrDropTriggerToPoolMappingRequest()
		err1693 := argvalue0.Read(jsProt1692)
		if err1693 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateOrDropWmTriggerToPoolMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateIschema requires 1 args")
			flag.Usage()
		}
		arg1694 := flag.Arg(1)
		mbTrans1695 := thrift.NewTMemoryBufferLen(len(arg1694))
		defer mbTrans1695.Close()
		_, err1696 := mbTrans1695.WriteString(arg1694)
		if err1696 != nil {
			Usage()
			return
		}
		factory1697 := thrift.NewTJSONProtocolFactory()
		jsProt1698 := factory1697.GetProtocol(mbTrans1695)
		argvalue0 := hive_metastore.NewISchema()
		err1699 := argvalue0.Read(jsProt1698)
		if err1699 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterIschema requires 1 args")
			flag.Usage()
		}
		arg1700 := flag.Arg(1)
		mbTrans1701 := thrift.NewTMemoryBufferLen(len(arg1700))
		defer mbTrans1701.Close()
		_, err1702 := mbTrans1701.WriteString(arg1700)
		if err1702 != nil {
			Usage()
			return
		}
		factory1703 := thrift.NewTJSONProtocolFactory()
		jsProt1704 := factory1703.GetProtocol(mbTrans1701)
		argvalue0 := hive_metastore.NewAlterISchemaRequest()
		err1705 := argvalue0.Read(jsProt1704)
		if err1705 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetIschema requires 1 args")
			flag.Usage()
		}
		arg1706 := flag.Arg(1)
		mbTrans1707 := thrift.NewTMemoryBufferLen(len(arg1706))
		defer mbTrans1707.Close()
		_, err1708 := mbTrans1707.WriteString(arg1706)
		if err1708 != nil {
			Usage()
			return
		}
		factory1709 := thrift.NewTJSONProtocolFactory()
		jsProt1710 := factory1709.GetProtocol(mbTrans1707)
		argvalue0 := hive_metastore.NewISchemaName()
		err1711 := argvalue0.Read(jsProt1710)
		if err1711 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropIschema requires 1 args")
			flag.Usage()
		}
		arg1712 := flag.Arg(1)
		mbTrans1713 := thrift.NewTMemoryBufferLen(len(arg1712))
		defer mbTrans1713.Close()
		_, err1714 := mbTrans1713.WriteString(arg1712)
		if err1714 != nil {
			Usage()
			return
		}
		factory1715 := thrift.NewTJSONProtocolFactory()
		jsProt1716 := factory1715.GetProtocol(mbTrans1713)
		argvalue0 := hive_metastore.NewISchemaName()
		err1717 := argvalue0.Read(jsProt1716)
		if err1717 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg1718 := flag.Arg(1)
		mbTrans1719 := thrift.NewTMemoryBufferLen(len(arg1718))
		defer mbTrans1719.Close()
		_, err1720 := mbTrans1719.WriteString(arg1718)
		if err1720 != nil {
			Usage()
			return
		}
		factory1721 := thrift.NewTJSONProtocolFactory()
		jsProt1722 := factory1721.GetProtocol(mbTrans1719)
		argvalue0 := hive_metastore.NewSchemaVersion()
		err1723 := argvalue0.Read(jsProt1722)
		if err1723 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg1724 := flag.Arg(1)
		mbTrans1725 := thrift.NewTMemoryBufferLen(len(arg1724))
		defer mbTrans1725.Close()
		_, err1726 := mbTrans1725.WriteString(arg1724)
		if err1726 != nil {
			Usage()
			return
		}
		factory1727 := thrift.NewTJSONProtocolFactory()
		jsProt1728 := factory1727.GetProtocol(mbTrans1725)
		argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
		err1729 := argvalue0.Read(jsProt1728)
		if err1729 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_latest_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaLatestVersion requires 1 args")
			flag.Usage()
		}
		arg1730 := flag.Arg(1)
		mbTrans1731 := thrift.NewTMemoryBufferLen(len(arg1730))
		defer mbTrans1731.Close()
		_, err1732 := mbTrans1731.WriteString(arg1730)
		if err1732 != nil {
			Usage()
			return
		}
		factory1733 := thrift.NewTJSONProtocolFactory()
		jsProt1734 := factory1733.GetProtocol(mbTrans1731)
		argvalue0 := hive_metastore.NewISchemaName()
		err1735 := argvalue0.Read(jsProt1734)
		if err1735 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaLatestVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_all_versions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaAllVersions requires 1 args")
			flag.Usage()
		}
		arg1736 := flag.Arg(1)
		mbTrans1737 := thrift.NewTMemoryBufferLen(len(arg1736))
		defer mbTrans1737.Close()
		_, err1738 := mbTrans1737.WriteString(arg1736)
		if err1738 != nil {
			Usage()
			return
		}
		factory1739 := thrift.NewTJSONProtocolFactory()
		jsProt1740 := factory1739.GetProtocol(mbTrans1737)
		argvalue0 := hive_metastore.NewISchemaName()
		err1741 := argvalue0.Read(jsProt1740)
		if err1741 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaAllVersions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg1742 := flag.Arg(1)
		mbTrans1743 := thrift.NewTMemoryBufferLen(len(arg1742))
		defer mbTrans1743.Close()
		_, err1744 := mbTrans1743.WriteString(arg1742)
		if err1744 != nil {
			Usage()
			return
		}
		factory1745 := thrift.NewTJSONProtocolFactory()
		jsProt1746 := factory1745.GetProtocol(mbTrans1743)
		argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
		err1747 := argvalue0.Read(jsProt1746)
		if err1747 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schemas_by_cols":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemasByCols requires 1 args")
			flag.Usage()
		}
		arg1748 := flag.Arg(1)
		mbTrans1749 := thrift.NewTMemoryBufferLen(len(arg1748))
		defer mbTrans1749.Close()
		_, err1750 := mbTrans1749.WriteString(arg1748)
		if err1750 != nil {
			Usage()
			return
		}
		factory1751 := thrift.NewTJSONProtocolFactory()
		jsProt1752 := factory1751.GetProtocol(mbTrans1749)
		argvalue0 := hive_metastore.NewFindSchemasByColsRqst()
		err1753 := argvalue0.Read(jsProt1752)
		if err1753 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemasByCols(context.Background(), value0))
		fmt.Print("\n")
		break
	case "map_schema_version_to_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MapSchemaVersionToSerde requires 1 args")
			flag.Usage()
		}
		arg1754 := flag.Arg(1)
		mbTrans1755 := thrift.NewTMemoryBufferLen(len(arg1754))
		defer mbTrans1755.Close()
		_, err1756 := mbTrans1755.WriteString(arg1754)
		if err1756 != nil {
			Usage()
			return
		}
		factory1757 := thrift.NewTJSONProtocolFactory()
		jsProt1758 := factory1757.GetProtocol(mbTrans1755)
		argvalue0 := hive_metastore.NewMapSchemaVersionToSerdeRequest()
		err1759 := argvalue0.Read(jsProt1758)
		if err1759 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MapSchemaVersionToSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_schema_version_state":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetSchemaVersionState requires 1 args")
			flag.Usage()
		}
		arg1760 := flag.Arg(1)
		mbTrans1761 := thrift.NewTMemoryBufferLen(len(arg1760))
		defer mbTrans1761.Close()
		_, err1762 := mbTrans1761.WriteString(arg1760)
		if err1762 != nil {
			Usage()
			return
		}
		factory1763 := thrift.NewTJSONProtocolFactory()
		jsProt1764 := factory1763.GetProtocol(mbTrans1761)
		argvalue0 := hive_metastore.NewSetSchemaVersionStateRequest()
		err1765 := argvalue0.Read(jsProt1764)
		if err1765 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetSchemaVersionState(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSerde requires 1 args")
			flag.Usage()
		}
		arg1766 := flag.Arg(1)
		mbTrans1767 := thrift.NewTMemoryBufferLen(len(arg1766))
		defer mbTrans1767.Close()
		_, err1768 := mbTrans1767.WriteString(arg1766)
		if err1768 != nil {
			Usage()
			return
		}
		factory1769 := thrift.NewTJSONProtocolFactory()
		jsProt1770 := factory1769.GetProtocol(mbTrans1767)
		argvalue0 := hive_metastore.NewSerDeInfo()
		err1771 := argvalue0.Read(jsProt1770)
		if err1771 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSerde requires 1 args")
			flag.Usage()
		}
		arg1772 := flag.Arg(1)
		mbTrans1773 := thrift.NewTMemoryBufferLen(len(arg1772))
		defer mbTrans1773.Close()
		_, err1774 := mbTrans1773.WriteString(arg1772)
		if err1774 != nil {
			Usage()
			return
		}
		factory1775 := thrift.NewTJSONProtocolFactory()
		jsProt1776 := factory1775.GetProtocol(mbTrans1773)
		argvalue0 := hive_metastore.NewGetSerdeRequest()
		err1777 := argvalue0.Read(jsProt1776)
		if err1777 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_lock_materialization_rebuild":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetLockMaterializationRebuild requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err1780 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1780 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetLockMaterializationRebuild(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "heartbeat_lock_materialization_rebuild":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "HeartbeatLockMaterializationRebuild requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err1783 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1783 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.HeartbeatLockMaterializationRebuild(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_runtime_stats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddRuntimeStats requires 1 args")
			flag.Usage()
		}
		arg1784 := flag.Arg(1)
		mbTrans1785 := thrift.NewTMemoryBufferLen(len(arg1784))
		defer mbTrans1785.Close()
		_, err1786 := mbTrans1785.WriteString(arg1784)
		if err1786 != nil {
			Usage()
			return
		}
		factory1787 := thrift.NewTJSONProtocolFactory()
		jsProt1788 := factory1787.GetProtocol(mbTrans1785)
		argvalue0 := hive_metastore.NewRuntimeStat()
		err1789 := argvalue0.Read(jsProt1788)
		if err1789 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddRuntimeStats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_runtime_stats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRuntimeStats requires 1 args")
			flag.Usage()
		}
		arg1790 := flag.Arg(1)
		mbTrans1791 := thrift.NewTMemoryBufferLen(len(arg1790))
		defer mbTrans1791.Close()
		_, err1792 := mbTrans1791.WriteString(arg1790)
		if err1792 != nil {
			Usage()
			return
		}
		factory1793 := thrift.NewTJSONProtocolFactory()
		jsProt1794 := factory1793.GetProtocol(mbTrans1791)
		argvalue0 := hive_metastore.NewGetRuntimeStatsRequest()
		err1795 := argvalue0.Read(jsProt1794)
		if err1795 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRuntimeStats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName(context.Background()))
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion(context.Background()))
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatus(context.Background()))
		fmt.Print("\n")
		break
	case "getStatusDetails":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatusDetails(context.Background()))
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters(context.Background()))
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getOption":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOption(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions(context.Background()))
		fmt.Print("\n")
		break
	case "getCpuProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err1800 := (strconv.Atoi(flag.Arg(1)))
		if err1800 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCpuProfile(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince(context.Background()))
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize(context.Background()))
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
